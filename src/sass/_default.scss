/*============================================================================
  #Grid
==============================================================================*/

// The `$grid-breakpoints` list is used to build our media queries.
// You can use these in the media-query mixin.
$shopify-grid-breakpoints: (
  $small "(max-width: #{$grid-medium - 1})",
  $medium "(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})",
  $medium-down "(max-width: #{$grid-large - 1})",
  $medium-up "(min-width: #{$grid-medium})",
  $large "(min-width: #{$grid-large}) and (max-width: #{$grid-widescreen - 1})",
  $large-down "(max-width: #{$grid-widescreen - 1})",
  $large-up "(min-width: #{$grid-large})",
  $widescreen "(min-width: #{$grid-widescreen})"
);

/*============================================================================
  Grid Setup
    1. Allow the grid system to be used on lists.
    2. Remove any margins and paddings that might affect the grid system.
    3. Apply a negative `margin-left` to negate the columns' gutters.
==============================================================================*/
.grid {
  @include clearfix();
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -$grid-gutter;

  @include media-query($small) {
    margin-left: -$grid-gutter-mobile;
  }
}

.grid__item {
  float: left;
  padding-left: $grid-gutter;
  width: 100%;

  @include media-query($small) {
    padding-left: $grid-gutter-mobile;
  }

  &[class*="--push"] {
    position: relative;
  }
}

/*============================================================================
  Reversed grids allow you to structure your source in the opposite
  order to how your rendered layout will appear.
==============================================================================*/
.grid--rev {
  direction: rtl;
  text-align: left;

  > .grid__item {
    direction: ltr;
    text-align: left;
    float: right;
  }
}
